package vical.com.pe.myapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vical.com.pe.myapp.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "Nombre", false, "NOMBRE");
        public final static Property Paterno = new Property(2, String.class, "Paterno", false, "PATERNO");
        public final static Property Materno = new Property(3, String.class, "Materno", false, "MATERNO");
        public final static Property Edad = new Property(4, Integer.class, "Edad", false, "EDAD");
        public final static Property Usuario = new Property(5, String.class, "Usuario", false, "USUARIO");
        public final static Property Password = new Property(6, String.class, "Password", false, "PASSWORD");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NOMBRE' TEXT," + // 1: Nombre
                "'PATERNO' TEXT," + // 2: Paterno
                "'MATERNO' TEXT," + // 3: Materno
                "'EDAD' INTEGER," + // 4: Edad
                "'USUARIO' TEXT," + // 5: Usuario
                "'PASSWORD' TEXT);"); // 6: Password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(2, Nombre);
        }
 
        String Paterno = entity.getPaterno();
        if (Paterno != null) {
            stmt.bindString(3, Paterno);
        }
 
        String Materno = entity.getMaterno();
        if (Materno != null) {
            stmt.bindString(4, Materno);
        }
 
        Integer Edad = entity.getEdad();
        if (Edad != null) {
            stmt.bindLong(5, Edad);
        }
 
        String Usuario = entity.getUsuario();
        if (Usuario != null) {
            stmt.bindString(6, Usuario);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(7, Password);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Paterno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Materno
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Edad
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Usuario
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // Password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPaterno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaterno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEdad(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUsuario(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
