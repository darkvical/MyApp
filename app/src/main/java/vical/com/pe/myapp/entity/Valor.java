package vical.com.pe.myapp.entity;

import vical.com.pe.myapp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import vical.com.pe.myapp.dao.ListaDao;
import vical.com.pe.myapp.dao.ValorDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "VALOR".
 */
public class Valor {

    private Long listaId;
    private Long id;
    /** Not-null value. */
    private String Codigo;
    private String Nomnbre;
    private String Descripcion;
    private String Valor;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ValorDao myDao;

    private Lista lista;
    private Long lista__resolvedKey;


    public Valor() {
    }

    public Valor(Long id) {
        this.id = id;
    }

    public Valor(Long listaId, Long id, String Codigo, String Nomnbre, String Descripcion, String Valor) {
        this.listaId = listaId;
        this.id = id;
        this.Codigo = Codigo;
        this.Nomnbre = Nomnbre;
        this.Descripcion = Descripcion;
        this.Valor = Valor;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getValorDao() : null;
    }

    public Long getListaId() {
        return listaId;
    }

    public void setListaId(Long listaId) {
        this.listaId = listaId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getCodigo() {
        return Codigo;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCodigo(String Codigo) {
        this.Codigo = Codigo;
    }

    public String getNomnbre() {
        return Nomnbre;
    }

    public void setNomnbre(String Nomnbre) {
        this.Nomnbre = Nomnbre;
    }

    public String getDescripcion() {
        return Descripcion;
    }

    public void setDescripcion(String Descripcion) {
        this.Descripcion = Descripcion;
    }

    public String getValor() {
        return Valor;
    }

    public void setValor(String Valor) {
        this.Valor = Valor;
    }

    /** To-one relationship, resolved on first access. */
    public Lista getLista() {
        Long __key = this.listaId;
        if (lista__resolvedKey == null || !lista__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ListaDao targetDao = daoSession.getListaDao();
            Lista listaNew = targetDao.load(__key);
            synchronized (this) {
                lista = listaNew;
            	lista__resolvedKey = __key;
            }
        }
        return lista;
    }

    public void setLista(Lista lista) {
        synchronized (this) {
            this.lista = lista;
            listaId = lista == null ? null : lista.getId();
            lista__resolvedKey = listaId;
        }
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
